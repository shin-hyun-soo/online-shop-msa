pipeline {
    agent any
    tools {
        maven 'Maven'
    }
    environment {
        AWS_ACCOUNT_ID = credentials('AWS_ACCOUNT_ID')
        AWS_CREDENTIALS = credentials('aws-credentials')
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        AWS_DEFAULT_REGION = 'ap-northeast-2' 
        IMAGE_REPO_NAME = 'my-ecr-repo'
        ARGOCD_APP_NAME = 'online-shop-msa'
        ARGOCD_SERVER = 'ae80d1f57c08d4b3eb9ee707b033ffa6-1154804483.ap-northeast-2.elb.amazonaws.com'
    }
    stages {
        stage('Build Services') {
            parallel {
                stage('Build Product Service') {
                    steps {
                        dir('services/product-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Build Order Service') {
                    steps {
                        dir('services/order-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
                stage('Build User Service') {
                    steps {
                        dir('services/user-service') {
                            sh 'mvn clean package'
                        }
                    }
                }
            }
        }
        stage('Build and Push Docker Images') {
            steps {
                script {
                    def services = ['product-service', 'order-service', 'user-service']
                    services.each { service ->
                        dir("services/${service}") {
                            withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                                sh """
                                    aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
                                    docker build -t ${service}:${IMAGE_TAG} .
                                    docker tag ${service}:${IMAGE_TAG} ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${service}:${IMAGE_TAG}
                                    docker push ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${service}:${IMAGE_TAG}
                                """
                            }
                        }
                    }
                }
            }
        }
        stage('Update Kubernetes Manifests') {
            steps {
                script {
                    def services = ['product-service', 'order-service', 'user-service']
                    services.each { service ->
                        sh """
                            sed -i 's|image: .*${service}:.*|image: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${service}:${IMAGE_TAG}|' kubernetes/${service}-deployment.yaml
                            git add kubernetes/${service}-deployment.yaml
                        """
                    }
                    withCredentials([usernamePassword(credentialsId: 'github_credentials', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GIT_PASSWORD')]) {
                        sh """
                            git config user.email "jenkins@example.com"
                            git config user.name "Jenkins"
                            git commit -m "Update service images to ${IMAGE_TAG}"
                            git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/shin-hyun-soo/online-shop-msa.git HEAD:main
                        """
                    }
                }
            }
        }
        stage('Trigger ArgoCD Sync') {
            steps {
                withCredentials([string(credentialsId: 'argocd-auth-token', variable: 'ARGOCD_AUTH_TOKEN')]) {
                    sh """
                        argocd login ${ARGOCD_SERVER} --auth-token ${ARGOCD_AUTH_TOKEN} --insecure
                        argocd app sync online-shop-msa
                        argocd app wait online-shop-msa --health
                    """
                }
            }
        }
    }
    post {
        always {
            sh 'docker logout ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com'
        }
    }
}
